# Source: cassandra/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: cassandra-headless
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cassandra
      release: cassandra
  maxUnavailable: 1
---
# Source: cassandra/templates/configuration-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-configuration
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
data:
  README.md: |
    Place your Cassandra configuration files here. This will override the values set in any configuration environment variable. This will not be used in case the value *existingConfiguration* is used.
  
    More information [here](https://github.com/bitnami/bitnami-docker-cassandra#configuration)
---
# Source: cassandra/templates/initdb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-init-scripts
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
data:
  README.md: |
    You can copy here your custom `.sh` or `.cql` file so they are executed during the first boot of the image.
  
    More info in the [bitnami-docker-cassandra](https://github.com/bitnami/bitnami-docker-cassandra#initializing-a-new-instance) repository.
---
# Source: cassandra/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra-headless
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9042
      targetPort: cql
    - name: thrift
      port: 9160
      targetPort: thrift
  selector:
    app: cassandra
    release: cassandra
---
# Source: cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cassandra
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
  annotations: 
    {}
spec:
  type: ClusterIP
  ports:
    - name: cql
      port: 9042
      targetPort: cql
      nodePort: null
    - name: thrift
      port: 9160
      targetPort: thrift
      nodePort: null
  selector:
    app: cassandra
    release: cassandra
---
# Source: cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
    chart: cassandra-5.0.0
    release: cassandra
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: cassandra
      release: cassandra
  serviceName: cassandra-headless
  replicas: 3
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: cassandra
        chart: cassandra-5.0.0
        release: cassandra
        heritage: Helm
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            # Node 0 is the password seeder
            - |
              if [[ $HOSTNAME =~ (.*)-0$ ]]; then
                echo "Setting node as password seeder"
                export CASSANDRA_PASSWORD_SEEDER=yes
              else
                # Only node 0 will execute the startup initdb scripts
                export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /entrypoint.sh /run.sh
          image: docker.io/bitnami/cassandra:3.11.5-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: enfase
            - name: CASSANDRA_SEEDS
              value: "cassandra-0.cassandra-headless.default.svc.cluster.local,cassandra-1.cassandra-headless.default.svc.cluster.local"
            - name: CASSANDRA_PASSWORD
              value: '123456789'
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_USER
              value: "admin"
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_RACK
              value: rack1
            - name: CASSANDRA_ENABLE_RPC
              value: "true"
          livenessProbe:
            exec:
              command: ["/bin/sh", "-c", "nodetool status"]
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command: ["/bin/sh", "-c", "nodetool status | grep -E \"^UN\\s+${POD_IP}\""]
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          ports:
            - name: intra
              containerPort: 7000
            - name: tls
              containerPort: 7001
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
            - name: thrift
              containerPort: 9160
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/cassandra
            - name: init-db
              mountPath: /docker-entrypoint-initdb.d
            
            - name: configurations
              mountPath: /bitnami/cassandra/conf
        - name: metrics
          image: docker.io/bitnami/cassandra-exporter:2.3.0-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: jmx
              containerPort: 5555
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            tcpSocket:
              port: metrics
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 20
            timeoutSeconds: 45
      volumes:
        - name: configurations
          configMap:
            name: cassandra-configuration
        - name: init-db
          configMap:
            name: cassandra-init-scripts
        - name: data
          hostPath:
            path: /data/cas

